.TH v.net.timetable 1 "" "GRASS 7.8.5" "GRASS GIS User's Manual"
.SH NAME
\fI\fBv.net.timetable\fR\fR  \- Finds shortest path using timetables.
.SH KEYWORDS
vector, network, shortest path
.SH SYNOPSIS
\fBv.net.timetable\fR
.br
\fBv.net.timetable \-\-help\fR
.br
\fBv.net.timetable\fR \fBinput\fR=\fIname\fR  [\fBlayer\fR=\fIstring\fR]  \fBoutput\fR=\fIname\fR  [\fBarc_layer\fR=\fIstring\fR]   [\fBnode_layer\fR=\fIstring\fR]   [\fBarc_column\fR=\fIstring\fR]   [\fBarc_backward_column\fR=\fIstring\fR]   [\fBnode_column\fR=\fIstring\fR]   [\fBwalk_layer\fR=\fIstring\fR]  \fBroute_id\fR=\fIname\fR \fBstop_time\fR=\fIname\fR \fBto_stop\fR=\fIname\fR \fBwalk_length\fR=\fIname\fR  [\-\-\fBoverwrite\fR]  [\-\-\fBhelp\fR]  [\-\-\fBverbose\fR]  [\-\-\fBquiet\fR]  [\-\-\fBui\fR]
.SS Flags:
.IP "\fB\-\-overwrite\fR" 4m
.br
Allow output files to overwrite existing files
.IP "\fB\-\-help\fR" 4m
.br
Print usage summary
.IP "\fB\-\-verbose\fR" 4m
.br
Verbose module output
.IP "\fB\-\-quiet\fR" 4m
.br
Quiet module output
.IP "\fB\-\-ui\fR" 4m
.br
Force launching GUI dialog
.SS Parameters:
.IP "\fBinput\fR=\fIname\fR \fB[required]\fR" 4m
.br
Name of input vector map
.br
Or data source for direct OGR access
.IP "\fBlayer\fR=\fIstring\fR" 4m
.br
Layer number or name
.br
Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
.br
Default: \fI1\fR
.IP "\fBoutput\fR=\fIname\fR \fB[required]\fR" 4m
.br
Name for output vector map
.IP "\fBarc_layer\fR=\fIstring\fR" 4m
.br
Arc layer
.br
Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
.br
Default: \fI1\fR
.IP "\fBnode_layer\fR=\fIstring\fR" 4m
.br
Node layer
.br
Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
.br
Default: \fI2\fR
.IP "\fBarc_column\fR=\fIstring\fR" 4m
.br
Arc forward/both direction(s) cost column (number)
.IP "\fBarc_backward_column\fR=\fIstring\fR" 4m
.br
Arc backward direction cost column (number)
.IP "\fBnode_column\fR=\fIstring\fR" 4m
.br
Node cost column (number)
.IP "\fBwalk_layer\fR=\fIstring\fR" 4m
.br
Layer number or name with walking connections or \-1
.br
A single vector map can be connected to multiple database tables. This number determines which table to use. When used with direct OGR access this is the layer name.
.br
Default: \fI\-1\fR
.IP "\fBroute_id\fR=\fIname\fR \fB[required]\fR" 4m
.br
Name of column with route ids
.br
Default: \fIroute_id\fR
.IP "\fBstop_time\fR=\fIname\fR \fB[required]\fR" 4m
.br
Name of column with stop timestamps
.br
Default: \fIstop_time\fR
.IP "\fBto_stop\fR=\fIname\fR \fB[required]\fR" 4m
.br
Name of column with stop ids
.br
Default: \fIto_stop\fR
.IP "\fBwalk_length\fR=\fIname\fR \fB[required]\fR" 4m
.br
Name of column with walk lengths
.br
Default: \fIlength\fR
.SH DESCRIPTION
\fIv.net.timetable\fR finds the shortest path between two points
using timetables. \fIv.net.timetable\fR reads input, one query per line,
from the standard input and writes output to the standard output as well as
to the \fBoutput\fR map and to tables linked to layers 1 and 2.
Each line of input must follow one of the following formats:
.br
.nf
\fC
PATH_ID FROM_X FROM_Y TO_X TO_Y START_TIME MIN_CHANGE MAX_CHANGES WALK_CHANGE
PATH_ID FROM_STOP TO_STOP START_TIME MIN_CHANGE MAX_CHANGES WALK_CHANGE
\fR
.fi
where PATH_ID is the identificator of a query that is used in the
output map to differentiate between queries. Search begins at
START_TIME. MIN_CHANGE gives the minimum number of time
(inclusively) for a change from one route to another. MAX_CHANGES
denotes the maximum number of changes allowed or \-1 if infinity.
WALK_CHANGE is 1 or 0 depending whether walking from a stop to
another stop is considered a change or not. Finally, the path is
found from FROM_STOP to TO_STOP in latter case and from the stop
closest to (FROM_X, FROM_Y) coordinates to the stop closest to
(TO_X, TO_Y) coordinates in former case.
.br
For each input query, module outputs a description of the shortest
path to the standard output. For example, using the tables given
below, for the following input:
.br
.nf
\fC
47 130 300 0 1 5 0
\fR
.fi
the following output is produced:
.br
.nf
\fC
Route 15, from 130 leaving at 15 arriving to 250 at 22
Walk from 250 leaving at 22 arriving to 300 at 24
\fR
.fi
Moreover, the module writes the path to the \fBoutput\fR map and
stores all the information necessary to reconstruct the path to the
tables. Table corresponding to stops/points is linked to layer 1 and
looks, after the query, as follows:
.br
.nf
\fC
cat|path_id|stop_id|index|arr_time|dep_time
1|47|130|1|0|15
2|47|250|2|22|22
3|47|300|3|24|24
\fR
.fi
where CAT is the category of a point in the map, PATH_ID is the path
identificator, STOP_ID is the identificator of the stop as used in
the input map, INDEX is the index of the stop on the path (i.e,
index=1 is the first stop visited, ...) and ARR_TIME and DEP_TIME
denote the arrival time and departure time respectively. Arrival
time for the first stop on the path is always equal to START_TIME
and departure time for the last stop is always equal to the arrival
time.
.br
The table linked to the second layer corresponds to subroutes taken
between stops. The following table is obtainedd for the above query:
.br
.nf
\fC
cat|path_id|from_id|to_id|route_id|index|from_time|to_time
1|47|130|250|15|1|15|22
2|47|250|300|\-1|2|22|24
\fR
.fi
where CAT is the category of lines of subroute between stops FROM_ID
to TO_ID, ROUTE_ID is the identificator of the route taken or \-1 if
walking, INDEX and PATH_ID are as above and FROM_TIME and TO_TIME
denote the times between which the route is taken.
.br
The \fBoutput\fR map contains the points on the positions of used
stops. If a subroute is taken between two stops then a line segment
is added between two corresponding points. Finally, instead of
straight line segment, the actual paths of routes can be given in \fB
paths\fR layer. If this parameter is used then each line in the
input map must contain identificators as category numbers of all
routes passing through the line. The module then finds the path
between two stops and writes this path instead. In case of walking
from one stop to another, straight line between the stops is used.
.SH NOTES
Timetables are stored in a table linked to the given \fBlayer\fR of
the \fBinput\fR map. Timetable consists of routes and each route is
just a sequence of stops with specified arrival times. If two
sequences of stops differ only in times then they still correspond
to two routes. For example, if there is a bus line that leaves every
20 minutes and follow exactly the same path every time then there
still needs to be a separate route for every time. For each stop
(given by the category number of the point) the table storing
information about the routes must contain the list of all routes
stopping at the stop(given by route identificators) together with
arrival times. That is, the table must contain three columns: stop \-
which is the key of the table, \fBroute_id\fR and \fBstop_time\fR
where each triple corresponds to a route arriving to a stop and a
certain time. For example, a valid table might look as
follows:
.br
.nf
\fC
cat|route_id|stop_time
100|5|0
130|5|10
150|5|20
250|5|30
300|5|40
260|15|5
130|15|15
250|15|22
150|35|17
250|35|27
300|35|37
100|35|50
\fR
.fi
Note that \fBstop_time\fR is an integer and so you can use any
units and offest to specify arrival times.
.br
Also, walking
connections between stops can be given by a table linked to \fB
walking\fR layer of the \fBinput\fR map. If this parameter is \-1
then walking between stops is not allowed. The table must contain
three columns: stop \- which is the key of the table, \fBto_stop\fR
and \fBlength\fR. A record in the table says that it takes \fBlength
\fR units of time to walk from stop to \fBto_stop\fR. The
following is a valid table:
.br
.nf
\fC
cat|length|to_stop
250|2|300
\fR
.fi
Beware that this only means that it is possible to walk from stop
250 to stop 300 but not the other way round.
.SH EXAMPLES
To find a path from stop with identificator 130 to stop with
category 300, starting at time 0, with one time unit for change,
maximum of 5 changes and with walking not considered a change of
route, we use the following command:
.br
.nf
\fC
echo \(dq47 130 300 0 1 5 0\(dq | v.net.timetable \(rs
     input=buses output=path layer=5 walking=6 path=7
\fR
.fi
If, on the other hand, we know the coordinates of the places then the
following command might be used:
.br
.nf
\fC
echo \(dq47 10.31 54.31 90.21 28.21 0 1 5 0\(dq | v.net.timetable \(rs
     input=buses output=path layer=5 walking=6 path=7
\fR
.fi
.SH SEE ALSO
\fI
v.net,
v.net.path,
v.net.distance
\fR
.SH AUTHORS
Daniel Bundala, Google Summer of Code 2009, Student
.br
Wolf Bergenheim, Mentor
.SH SOURCE CODE
.PP
Available at: v.net.timetable source code (history)
.PP
Main index |
Vector index |
Topics index |
Keywords index |
Graphical index |
Full index
.PP
© 2003\-2020
GRASS Development Team,
GRASS GIS 7.8.5 Reference Manual
