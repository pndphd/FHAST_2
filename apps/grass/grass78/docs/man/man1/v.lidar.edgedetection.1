.TH v.lidar.edgedetection 1 "" "GRASS 7.8.5" "GRASS GIS User's Manual"
.SH NAME
\fI\fBv.lidar.edgedetection\fR\fR  \- Detects the object\(cqs edges from a LIDAR data set.
.SH KEYWORDS
vector, LIDAR, edges
.SH SYNOPSIS
\fBv.lidar.edgedetection\fR
.br
\fBv.lidar.edgedetection \-\-help\fR
.br
\fBv.lidar.edgedetection\fR [\-\fBe\fR] \fBinput\fR=\fIname\fR \fBoutput\fR=\fIname\fR  [\fBew_step\fR=\fIfloat\fR]   [\fBns_step\fR=\fIfloat\fR]   [\fBlambda_g\fR=\fIfloat\fR]   [\fBtgh\fR=\fIfloat\fR]   [\fBtgl\fR=\fIfloat\fR]   [\fBtheta_g\fR=\fIfloat\fR]   [\fBlambda_r\fR=\fIfloat\fR]   [\-\-\fBoverwrite\fR]  [\-\-\fBhelp\fR]  [\-\-\fBverbose\fR]  [\-\-\fBquiet\fR]  [\-\-\fBui\fR]
.SS Flags:
.IP "\fB\-e\fR" 4m
.br
Estimate point density and distance and quit
.br
Estimate point density and distance in map units for the input vector points within the current region extents and quit
.IP "\fB\-\-overwrite\fR" 4m
.br
Allow output files to overwrite existing files
.IP "\fB\-\-help\fR" 4m
.br
Print usage summary
.IP "\fB\-\-verbose\fR" 4m
.br
Verbose module output
.IP "\fB\-\-quiet\fR" 4m
.br
Quiet module output
.IP "\fB\-\-ui\fR" 4m
.br
Force launching GUI dialog
.SS Parameters:
.IP "\fBinput\fR=\fIname\fR \fB[required]\fR" 4m
.br
Name of input vector map
.br
Or data source for direct OGR access
.IP "\fBoutput\fR=\fIname\fR \fB[required]\fR" 4m
.br
Name for output vector map
.IP "\fBew_step\fR=\fIfloat\fR" 4m
.br
Length of each spline step in the east\-west direction
.br
Default: 4 * east\-west resolution
.IP "\fBns_step\fR=\fIfloat\fR" 4m
.br
Length of each spline step in the north\-south direction
.br
Default: 4 * north\-south resolution
.IP "\fBlambda_g\fR=\fIfloat\fR" 4m
.br
Regularization weight in gradient evaluation
.br
Default: \fI0.01\fR
.IP "\fBtgh\fR=\fIfloat\fR" 4m
.br
High gradient threshold for edge classification
.br
Default: \fI6\fR
.IP "\fBtgl\fR=\fIfloat\fR" 4m
.br
Low gradient threshold for edge classification
.br
Default: \fI3\fR
.IP "\fBtheta_g\fR=\fIfloat\fR" 4m
.br
Angle range for same direction detection
.br
Default: \fI0.26\fR
.IP "\fBlambda_r\fR=\fIfloat\fR" 4m
.br
Regularization weight in residual evaluation
.br
Default: \fI2\fR
.SH DESCRIPTION
\fIv.lidar.edgedetection\fR is the first of three steps to filter
LiDAR data. The filter aims to recognize and extract attached and
detached object (such as buildings, bridges, power lines,  trees, etc.)
in order to create a Digital Terrain Model.
.PP
In particular, this module detects the edge of each single feature over
the terrain surface of a LIDAR point surface. First of all, a bilinear
spline interpolation with a Tychonov regularization parameter is
performed. The gradient is minimized and the low Tychonov regularization
parameter brings the interpolated functions as close as possible to the
observations. Bicubic spline interpolation with Tychonov regularization
is then performed. However, now the curvature is minimized and the
regularization parameter is set to a high value. For each point, an
interpolated value is computed from the bicubic surface and an interpolated
gradient is computed from the bilinear surface. At each point the gradient
magnitude and the direction of the edge vector are calculated, and the
residual between interpolated and observed values is computed. Two thresholds
are defined on the gradient, a high threshold \fBtgh\fR and a low one
\fBtgl\fR. For each point, if the gradient magnitude is greater than or
equal to the high threshold and its residual is greater than or equal to
zero, it is labeled as an EDGE point. Similarly a point is labeled as
being an EDGE point if the gradient magnitude is greater than or equal to
the low threshold, its residual is greater than or equal to zero, and the
gradient to two of eight neighboring points is greater than the high
threshold. Other points are classified as TERRAIN.
.PP
The length (in mapping units) of each spline step is defined by
\fBew_step\fR for the east\-west direction and \fBns_step\fR for the
north\-south direction.
.PP
The output will be a vector map in which points has been classified as
TERRAIN, EDGE or UNKNOWN. This vector map should be the input of
\fIv.lidar.growing\fR module.
.SH NOTES
In this module, an external table will be created which will be useful for
the next module of the procedure of LiDAR data filtering. In this table
the interpolated height values of each point will be recorded. Also points
in the output vector map will be classified as:
.br
.nf
\fC
TERRAIN (cat = 1, layer = 1)
EDGE (cat = 2, layer = 1)
UNKNOWN (cat = 3, layer = 1)
\fR
.fi
The final result of the whole procedure (\fIv.lidar.edgedetection\fR,
\fIv.lidar.growing\fR,
\fIv.lidar.correction\fR)
will be a point classification in four categories:
.br
.nf
\fC
TERRAIN SINGLE PULSE (cat = 1, layer = 2)
TERRAIN DOUBLE PULSE (cat = 2, layer = 2)
OBJECT SINGLE PULSE (cat = 3, layer = 2)
OBJECT DOUBLE PULSE (cat = 4, layer = 2)
\fR
.fi
.SH EXAMPLES
.SS Basic edge detection
.br
.nf
\fC
# last return points
v.lidar.edgedetection input=vector_last output=edge ew_step=8 ns_step=8 lambda_g=0.5
\fR
.fi
.SS Complete workflow
.br
.nf
\fC
# region settings (using an existing raster)
g.region raster=elev_lid792_1m
# import
v.in.lidar \-tr input=points.las output=points
v.in.lidar \-tr input=points.las output=points_first return_filter=first
# detection
v.lidar.edgedetection input=points output=edge ew_step=8 ns_step=8 lambda_g=0.5
v.lidar.growing input=edge output=growing first=points_first
v.lidar.correction input=growing output=correction terrain=only_terrain
# visualization of selected points
# zoom somewhere first, to make it faster
d.rast map=orthophoto
d.vect map=correction layer=2 cats=2,3,4 color=red size=0.25
d.vect map=correction layer=2 cats=1 color=0:128:0 size=0.5
# interpolation (this may take some time)
v.surf.rst input=only_terrain elevation=terrain
# get object points for 3D visualization
v.extract input=correction layer=2 cats=2,3,4 output=objects
\fR
.fi
.PP
\fIFigure 1: Example output from complete workflow (red: objects, green: terrain)\fR
.PP
\fI
Figure 2: 3D visualization of filtered object points (red)
and terrain created from terrain points (gray)
\fR
.SH REFERENCES
.RS 4n
.IP \(bu 4n
Antolin, R. et al., 2006. Digital terrain models determination by LiDAR
technology: Po basin experimentation. Bolletino di Geodesia e Scienze
Affini, anno LXV, n. 2, pp. 69\-89.
.IP \(bu 4n
Brovelli M. A., Cannata M., Longoni U.M., 2004. LIDAR Data Filtering and
DTM Interpolation Within GRASS, Transactions in GIS, April 2004,  vol. 8,
iss. 2, pp. 155\-174(20), Blackwell Publishing Ltd.
.IP \(bu 4n
Brovelli M. A., Cannata M., 2004. Digital Terrain model reconstruction in
urban areas from airborne laser scanning data: the method and an  example
for Pavia (Northern Italy). Computers and Geosciences 30 (2004) pp.325\-331
.IP \(bu 4n
Brovelli M. A. and Longoni U.M., 2003. Software per il filtraggio di dati
LIDAR, Rivista dell\(cqAgenzia del Territorio, n. 3\-2003, pp. 11\-22 (ISSN 1593\-2192).
.IP \(bu 4n
Brovelli M. A., Cannata M. and Longoni U.M., 2002. DTM LIDAR in area urbana,
Bollettino SIFET N.2, pp. 7\-26.
.IP \(bu 4n
Performances of the filter can be seen in the
ISPRS WG III/3 Comparison of Filters
report by Sithole, G. and Vosselman, G., 2003.
.RE
.SH SEE ALSO
\fI
v.lidar.growing,
v.lidar.correction,
v.surf.bspline,
v.surf.rst,
v.in.lidar,
v.in.ascii
\fR
.SH AUTHORS
Original version of program in GRASS 5.4:
.br
Maria Antonia Brovelli, Massimiliano Cannata, Ulisse Longoni and Mirko Reguzzoni
.br
.br
Update for GRASS 6.X:
.br
Roberto Antolin and Gonzalo Moreno
.SH SOURCE CODE
.PP
Available at: v.lidar.edgedetection source code (history)
.PP
Main index |
Vector index |
Topics index |
Keywords index |
Graphical index |
Full index
.PP
© 2003\-2020
GRASS Development Team,
GRASS GIS 7.8.5 Reference Manual
