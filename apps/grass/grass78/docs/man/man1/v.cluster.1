.TH v.cluster 1 "" "GRASS 7.8.5" "GRASS GIS User's Manual"
.SH NAME
\fI\fBv.cluster\fR\fR  \- Performs cluster identification.
.SH KEYWORDS
vector, point cloud, cluster, clump, level1
.SH SYNOPSIS
\fBv.cluster\fR
.br
\fBv.cluster \-\-help\fR
.br
\fBv.cluster\fR [\-\fB2bt\fR] \fBinput\fR=\fIname\fR \fBoutput\fR=\fIname\fR  [\fBlayer\fR=\fIstring\fR]   [\fBdistance\fR=\fIfloat\fR]   [\fBmin\fR=\fIinteger\fR]   [\fBmethod\fR=\fIstring\fR]   [\-\-\fBoverwrite\fR]  [\-\-\fBhelp\fR]  [\-\-\fBverbose\fR]  [\-\-\fBquiet\fR]  [\-\-\fBui\fR]
.SS Flags:
.IP "\fB\-2\fR" 4m
.br
Force 2D clustering
.IP "\fB\-b\fR" 4m
.br
Do not build topology
.br
Advantageous when handling a large number of points
.IP "\fB\-t\fR" 4m
.br
Do not create attribute table
.IP "\fB\-\-overwrite\fR" 4m
.br
Allow output files to overwrite existing files
.IP "\fB\-\-help\fR" 4m
.br
Print usage summary
.IP "\fB\-\-verbose\fR" 4m
.br
Verbose module output
.IP "\fB\-\-quiet\fR" 4m
.br
Quiet module output
.IP "\fB\-\-ui\fR" 4m
.br
Force launching GUI dialog
.SS Parameters:
.IP "\fBinput\fR=\fIname\fR \fB[required]\fR" 4m
.br
Name of input vector map
.br
Or data source for direct OGR access
.IP "\fBoutput\fR=\fIname\fR \fB[required]\fR" 4m
.br
Name for output vector map
.IP "\fBlayer\fR=\fIstring\fR" 4m
.br
Layer number or name for cluster ids
.br
Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
.br
Default: \fI2\fR
.IP "\fBdistance\fR=\fIfloat\fR" 4m
.br
Maximum distance to neighbors
.IP "\fBmin\fR=\fIinteger\fR" 4m
.br
Minimum number of points to create a cluster
.IP "\fBmethod\fR=\fIstring\fR" 4m
.br
Clustering method
.br
Options: \fIdbscan, dbscan2, density, optics, optics2\fR
.br
Default: \fIdbscan\fR
.SH DESCRIPTION
\fIv.cluster\fR partitions a point cloud into clusters or clumps.
.PP
If the minimum number of points is not specified with the \fBmin\fR
option, the minimum number of points to constitute a cluster is
\fInumber of dimensions + 1\fR, i.e. 3 for 2D points and 4 for 3D
points.
.PP
If the maximum distance is not specified with the \fBdistance\fR
option, the maximum distance is estimated from the observed distances
to the neighbors using the upper 99% confidence interval.
.PP
\fIv.cluster\fR supports different methods for clustering. The
recommended methods are \fBmethod=dbscan\fR if all clusters should
have a density (maximum distance between points) not larger than
\fBdistance\fR or \fBmethod=density\fR if clusters should be created
separately for each observed density (distance to the farthest neighbor).
.SS dbscan
The Density\-Based Spatial
Clustering of Applications with Noise is a commonly used clustering
algorithm. A new cluster is started for a point with at least
\fImin\fR \- 1 neighbors within the maximum distance. These neighbors
are added to the cluster. The cluster is then expanded as long as at
least \fImin\fR \- 1 neighbors are within the maximum distance for each
point already in the cluster.
.SS dbscan2
Similar to \fIdbscan\fR, but here it is sufficient if the resultant
cluster consists of at least \fBmin\fR points, even if no point in the
cluster has at least \fImin \- 1\fR neighbors within \fBdistance\fR.
.SS density
This method creates clusters according to their point density. The
maximum distance is not used. Instead, the points are sorted ascending
by the distance to their farthest neighbor (core distance), inspecting
\fImin \- 1\fR neighbors. The densest cluster is created first, using
as threshold the core distance of the seed point. The cluster is
expanded as for DBSCAN, with the difference that each cluster has its
own maximum distance. This method can identify clusters with different
densities and can create nested clusters.
.SS optics
This method is Ordering Points to
Identify the Clustering Structure. It is controlled by the number
of neighbor points (option \fImin\fR \- 1). The core distance of a
point is the distance to the farthest neighbor. The reachability of a
point \fIq\fR is its distance from a point \fIp\fR (original optics:
max(core\-distance(p), distance(p, q))). The aim of the \fIoptics\fR
method is to reduce the reachability of each point. Each unprocessed
point is the seed for a new cluster. Its neighbors are added to a queue
sorted by smallest reachability if their reachability can be reduced.
The points in the queue are processed and their unprocessed neighbors
are added to a queue sorted by smallest reachability if their
reachability can be reduced.
.PP
The \fIoptics\fR method does not create clusters itself, but produces
an ordered list of the points together with their reachability. The
output list is ordered according to the order of processing: the first
point processed is the first in the list, the last point processed is
the last in the list. Clusters can be extracted from this list by
identifying valleys in the points\(cq reachability, e.g. by using a
threshold value. If a maximum distance is specified, this is used to
identify clusters, otherwise each separated network will constitute a
cluster.
.PP
The OPTICS algorithm uses each yet unprocessed point to start a new
cluster. The order of the input points is arbitrary and can thus
influence the resultant clusters.
.SS optics2
\fBEXPERIMENTAL\fR This method is similar to OPTICS, minimizing the
reachability of each point. Points are reconnected if their
reachability can be reduced. Contrary to OPTICS, a cluster\(cqs seed is
not fixed but changed if possible. Each point is connected to another
point until the core of the cluster (seed point) is reached.
Effectively, the initial seed is updated in the process. Thus separated
networks of points are created, with each network representing a
cluster. The maximum distance is not used.
.SH NOTES
By default, cluster IDs are stored as category values of the points
in layer 2.
.SH EXAMPLE
Analysis of random points for areas in areas of the vector
\fIurbanarea\fR (North Carolina sample dataset).
.PP
First generate 1000 random points within the areas the vector urbanarea
and within the subregion, then do clustering and visualize the result:
.br
.nf
\fC
# pick a subregion of the vector urbanarea
g.region \-p n=272950 s=188330 w=574720 e=703090 res=10
# create random points in areas
v.random output=random_points npoints=1000 restrict=urbanarea
# identify clusters
v.cluster input=random_points output=clusters_optics method=optics
# set random vector color table for the clusters
v.colors map=clusters_optics layer=2 use=cat color=random
# display in command line
d.mon wx0
# note the second layer and transparent (none) color of the circle border
d.vect map=clusters_optics layer=2 icon=basic/point size=10 color=none
\fR
.fi
.PP
\fI
Figure: Four different methods with default settings applied to
1000 random points generated in the same way as in the example.
\fR
Generate random points for analysis (100 points per area), use different
method for clustering and visualize using color stored the attribute table.
.br
.nf
\fC
# pick a subregion of the vector urbanarea
g.region \-p n=272950 s=188330 w=574720 e=703090 res=10
# create clustered points
v.random output=rand_clust npoints=100 restrict=urbanarea \-a
# identify clusters
v.cluster in=rand_clust out=rand_clusters method=dbscan
# create colors for clusters
v.db.addtable map=rand_clusters layer=2 columns=\(dqcat integer,grassrgb varchar(11)\(dq
v.colors map=rand_clusters layer=2 use=cat color=random rgb_column=grassrgb
# display with your preferred method
# remember to use the second layer and RGB column
# for example use
d.vect map=rand_clusters layer=2 color=none rgb_column=grassrgb icon=basic/circle
\fR
.fi
.SH SEE ALSO
\fI
r.clump,
v.hull,
v.distance
\fR
.SH AUTHOR
Markus Metz
.SH SOURCE CODE
.PP
Available at: v.cluster source code (history)
.PP
Main index |
Vector index |
Topics index |
Keywords index |
Graphical index |
Full index
.PP
© 2003\-2020
GRASS Development Team,
GRASS GIS 7.8.5 Reference Manual
