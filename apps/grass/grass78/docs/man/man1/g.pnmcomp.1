.TH g.pnmcomp 1 "" "GRASS 7.8.5" "GRASS GIS User's Manual"
.SH NAME
\fI\fBg.pnmcomp\fR\fR  \- Overlays multiple PPM image files.
.SH KEYWORDS
general, display
.SH SYNOPSIS
\fBg.pnmcomp\fR
.br
\fBg.pnmcomp \-\-help\fR
.br
\fBg.pnmcomp\fR \fBinput\fR=\fIname\fR[,\fIname\fR,...]  [\fBmask\fR=\fIname\fR[,\fIname\fR,...]]   [\fBopacity\fR=\fIfloat\fR[,\fIfloat\fR,...]]  \fBoutput\fR=\fIname\fR  [\fBoutput_mask\fR=\fIname\fR]  \fBwidth\fR=\fIinteger\fR \fBheight\fR=\fIinteger\fR  [\fBbgcolor\fR=\fIname\fR]   [\-\-\fBoverwrite\fR]  [\-\-\fBhelp\fR]  [\-\-\fBverbose\fR]  [\-\-\fBquiet\fR]  [\-\-\fBui\fR]
.SS Flags:
.IP "\fB\-\-overwrite\fR" 4m
.br
Allow output files to overwrite existing files
.IP "\fB\-\-help\fR" 4m
.br
Print usage summary
.IP "\fB\-\-verbose\fR" 4m
.br
Verbose module output
.IP "\fB\-\-quiet\fR" 4m
.br
Quiet module output
.IP "\fB\-\-ui\fR" 4m
.br
Force launching GUI dialog
.SS Parameters:
.IP "\fBinput\fR=\fIname[,\fIname\fR,...]\fR \fB[required]\fR" 4m
.br
Name of input file(s)
.IP "\fBmask\fR=\fIname[,\fIname\fR,...]\fR" 4m
.br
Name of input mask file(s)
.IP "\fBopacity\fR=\fIfloat[,\fIfloat\fR,...]\fR" 4m
.br
Layer opacities
.IP "\fBoutput\fR=\fIname\fR \fB[required]\fR" 4m
.br
Name for output file
.IP "\fBoutput_mask\fR=\fIname\fR" 4m
.br
Name for output mask file
.IP "\fBwidth\fR=\fIinteger\fR \fB[required]\fR" 4m
.br
Image width
.IP "\fBheight\fR=\fIinteger\fR \fB[required]\fR" 4m
.br
Image height
.IP "\fBbgcolor\fR=\fIname\fR" 4m
.br
Background color
.br
Either a standard color name or R:G:B triplet
.SH DESCRIPTION
\fIg.pnmcomp\fR isn\(cqt meant for end users. It\(cqs an internal tool
for use by \fIwxGUI\fR.
.PP
In essence, \fIg.pnmcomp\fR generates a PPM image by overlaying a
series of PPM/PGM pairs (PPM = RGB image, PGM = alpha channel).
.SH NOTES
The intention is that \fId.*\fR modules will emit PPM/PGM pairs (by
way of the PNG\-driver code being integrated into Display Library). The
GUI will manage a set of layers; each layer consists of the data
necessary to generate a PPM/PGM pair.
Whenever the layer \(dqstack\(dq changes (by adding, removing,
hiding, showing or re\-ordering layers), the GUI will render any layers
for which it doesn\(cqt already have the PPM/PGM pair, then re\-run
\fIg.pnmcomp\fR to generate the final image (just redoing the
composition is a lot faster than redrawing everything).
.PP
A C/C++ GUI would either have \fIg.pnmcomp\(cqs\fR functionality
(image composition) built\-in, or would use the system\(cqs graphics API
to perform composition (for translucent layers, you would need OpenGL
or the Render extension, or something else which supports translucent
rendering).
.PP
Tk doesn\(cqt support transparent (masked) true\-colour images (it does
support transparent GIFs, but that\(cqs limited to 256 colours), and an
image composition routine in Tcl would be unacceptably slow, hence
the existence of \fIg.pnmcomp\fR.
.SH SEE ALSO
\fI
g.cairocomp
\fR
.SH AUTHOR
Glynn Clements
.SH SOURCE CODE
.PP
Available at: g.pnmcomp source code (history)
.PP
Main index |
General index |
Topics index |
Keywords index |
Graphical index |
Full index
.PP
© 2003\-2020
GRASS Development Team,
GRASS GIS 7.8.5 Reference Manual
