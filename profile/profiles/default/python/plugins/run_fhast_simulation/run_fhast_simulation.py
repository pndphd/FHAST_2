# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RunFHASTSimulation
                                 A QGIS plugin
 This plugin runs a FHAST simulation
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-17
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Peter Dudley
        email                : pndphd@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import (
    QAction,
    QMessageBox
)
from subprocess import Popen, CREATE_NEW_CONSOLE
from qgis.core import *
from qgis.gui import (
    QgsMessageBar
)

from PyQt5.QtWidgets import QMenu

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .run_fhast_simulation_dialog import RunFHASTSimulationDialog

import os.path
import os
import pathlib
import processing



class RunFHASTSimulation:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RunFHASTSimulation_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&FHAST Simulation Runner')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RunFHASTSimulation', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        # if add_to_menu:
        #     self.iface.addPluginToMenu(
        #         self.menu,
        #         action)

        menu_buttons = self.iface.mainWindow().menuBar().actions()
        button_list = []

        for button in menu_buttons:
            button_list.append(button.text())

        new_button = '&FHAST'

        self.menu = self.iface.mainWindow().findChild(QMenu, '&FHAST' )

        if not new_button in button_list:
        # # If the menu does not exist, create it!
            self.menu = QMenu( new_button, self.iface.mainWindow().menuBar() )
            self.menu.setObjectName( new_button )
            actions = self.iface.mainWindow().menuBar().actions()
            lastAction = actions[-1]
            self.iface.mainWindow().menuBar().insertMenu( lastAction, self.menu )

        # Finally, add your action to the menu
        self.menu.addAction(action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/run_fhast_simulation/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Run FHAST Simulation'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True




    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Run FHAST Simulation'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = RunFHASTSimulationDialog()

        # show the dialog
        self.dlg.show()

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Get the path of this script
            file_path = str(pathlib.Path(__file__).parent.resolve())

            #get the oputput path
            folder_path = self.dlg.output_folder.filePath()
            if len(folder_path) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Output Folder Selected") 
                self.iface.addVectorLayer(stop_program) 
            
            # get project name
            project_name = QgsProject.instance().fileName()
            file_name = os.path.basename(project_name).replace(".qgz","")

            # Make the output folder
            new_path = folder_path + "\\" + file_name + "_outputs"
            if not os.path.exists(new_path):
                os.makedirs(new_path)

            preview_flag = 0
            if self.dlg.previewBox.isChecked():
                preview_flag = 1

          
            # Get the paths of the csv files
            # Get path of Environmental Input File
            root = QgsProject.instance().layerTreeRoot()
            mygroup = root.findGroup("Environmental Input File")
            layer_list= mygroup.findLayers()
            if len(layer_list) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Environmental Input File") 
                self.iface.addVectorLayer(stop_program) 
            for layer in layer_list:
                actual_layer = layer.layer()
                daily_con_file_path = QgsProviderRegistry.instance().decodeUri(actual_layer.dataProvider().name(), actual_layer.publicSource()); actual_layer.source()

            # Get path of Fish Population File     
            mygroup = root.findGroup("Fish Population File")
            layer_list= mygroup.findLayers()
            if len(layer_list) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Fish Population File") 
                self.iface.addVectorLayer(stop_program) 
            for layer in layer_list:
                actual_layer = layer.layer()
                fish_pop_file_path = QgsProviderRegistry.instance().decodeUri(actual_layer.dataProvider().name(), actual_layer.publicSource()); actual_layer.source()

            # Get path of Fish Parameters File 
            mygroup = root.findGroup("Fish Parameters File")
            layer_list= mygroup.findLayers()
            if len(layer_list) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Fish Parameters File") 
                self.iface.addVectorLayer(stop_program) 
            for layer in layer_list:
                actual_layer = layer.layer()
                fish_param_file_path = QgsProviderRegistry.instance().decodeUri(actual_layer.dataProvider().name(), actual_layer.publicSource()); actual_layer.source()

            # Get path of Habitat Parameters Fil
            mygroup = root.findGroup("Habitat Parameters File")
            layer_list= mygroup.findLayers()
            if len(layer_list) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Habitat Parameters File") 
                self.iface.addVectorLayer(stop_program) 
            for layer in layer_list:
                actual_layer = layer.layer()
                hab_param_file_path = QgsProviderRegistry.instance().decodeUri(actual_layer.dataProvider().name(), actual_layer.publicSource()); actual_layer.source()

            # Get path of Interactions Parameters Fil
            mygroup = root.findGroup("Interactions Parameters File")
            layer_list= mygroup.findLayers()
            if len(layer_list) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Interactions Parameters File") 
                self.iface.addVectorLayer(stop_program) 
            for layer in layer_list:
                actual_layer = layer.layer()
                int_param_file_path = QgsProviderRegistry.instance().decodeUri(actual_layer.dataProvider().name(), actual_layer.publicSource()); actual_layer.source()

            # Get path of Predator Parameters File
            mygroup = root.findGroup("Predator Parameters File")
            layer_list= mygroup.findLayers()
            if len(layer_list) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Predator Parameters File") 
                self.iface.addVectorLayer(stop_program) 
            for layer in layer_list:
                actual_layer = layer.layer()
                pred_param_file_path = QgsProviderRegistry.instance().decodeUri(actual_layer.dataProvider().name(), actual_layer.publicSource()); actual_layer.source()

            # Get path of Tree Growth File
            mygroup = root.findGroup("Tree Growth")
            layer_list= mygroup.findLayers()
            if len(layer_list) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Tree Growth File") 
                self.iface.addVectorLayer(stop_program) 
            for layer in layer_list:
                actual_layer = layer.layer()
                tree_growth_file_path = QgsProviderRegistry.instance().decodeUri(actual_layer.dataProvider().name(), actual_layer.publicSource()); actual_layer.source()

            # Get path of Wildcard File
            wildcard_file_path = " "
            mygroup = root.findGroup("Wildcard File (Optional)")
            layer_list= mygroup.findLayers()
            for layer in layer_list:
                actual_layer = layer.layer()
                wildcard_file_path = QgsProviderRegistry.instance().decodeUri(actual_layer.dataProvider().name(), actual_layer.publicSource()); actual_layer.source()
                wildcard_file_path = wildcard_file_path['path']

            # Get the paths of the spatail files 
            # Get path of Top Point File
            mygroup = root.findGroup("Grid Top Point")
            layer_list= mygroup.findLayers()
            if len(layer_list) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Grid Top Point File") 
                self.iface.addVectorLayer(stop_program) 
            for layer in layer_list:
                top_point_layer = layer.layer().source()

            # Get path of Grid Centerline
            mygroup = root.findGroup("Grid Centerline")
            layer_list= mygroup.findLayers()
            if len(layer_list) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Grid Centerline File") 
                self.iface.addVectorLayer(stop_program) 
            for layer in layer_list:
                centerline_layer = layer.layer().source()

            # Get path of Cover File
            mygroup = root.findGroup("Cover File")
            layer_list= mygroup.findLayers()
            if len(layer_list) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Cover File File") 
                self.iface.addVectorLayer(stop_program) 
            for layer in layer_list:
                cover_layer = layer.layer().source()

            # Get path of AOI File
            aoi_layer = " "
            mygroup = root.findGroup("Area of Interest (Optional)")
            layer_list= mygroup.findLayers()

            # If just one set it as aoi
            if len(layer_list) == 1:
                for layer in layer_list:
                    aoi_layer = layer.layer().source()

            # if 2 set the intercept as the aoi
            if len(layer_list) > 1:
                layer_1 = layer_list[0].layer()
                layer_2 = layer_list[1].layer()
                parameters = {'INPUT' : layer_1, 'OVERLAY' : layer_2, 'OUTPUT' : new_path + '\\joint_aoi.shp'}
                results = processing.run('qgis:intersection', parameters)
                aoi_layer = results['OUTPUT']

            # Get path of Canopy File
            mygroup = root.findGroup("Canopy File")
            layer_list= mygroup.findLayers()
            if len(layer_list) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Canopy File") 
                self.iface.addVectorLayer(stop_program) 
                       
            for layer in layer_list:
                canopy_layer = layer.layer().source()
            # Get path of Flow Folder
            mygroup = root.findGroup("Depth or Velocity Example Raster")
            layer_list= mygroup.findLayers()
            if len(layer_list) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Depth or Velocity Example Raster") 
                self.iface.addVectorLayer(stop_program) 
            for layer in layer_list:
                raster_path = str(layer.layer().source())

                if "\\" in raster_path:
                    raster_path = raster_path[0:raster_path.rindex('\\')]  
                elif "/" in raster_path:
                    raster_path = raster_path[0:raster_path.rindex('/')]
                raster_path = raster_path.replace("\\","/")   


            notes_file = open((new_path + "\\notes.txt"), "w")
            notes_file.writelines(QgsProject.instance().metadata().abstract())
            notes_file.close()

            # Make the codes for theinput file           
            run_name_code = "run name"
            output_path_code = "output path"
            notes_file = "notes file"
            fish_population = "fish population"
            daily_conditions = "daily conditions"
            fish_parameters = "fish parameters"
            grid_centerline = "grid centerline"
            grid_top_point = "grid top point"
            cover = "cover"
            canopy = "canopy"
            tree_growth = "tree growth"
            habitat_parameters = "habitat parameters"
            interaction_parameters = "interaction parameters"
            predator_parameters = "predator parameters"
            raster_folder = "raster folder"
            aoi = "aoi"
            wildcard = "wildcard"
            new_line = "\n"
            comma = ", "


            
            # Make the config text string
            config_text = (run_name_code + comma + file_name + new_line +
                           output_path_code + comma + folder_path.replace("\\","/") + new_line +
                           notes_file + comma + new_path.replace("\\","/") + "/notes.txt" + new_line +
                           fish_population + comma + fish_pop_file_path['path'].replace("\\","/") + new_line +
                           daily_conditions + comma + daily_con_file_path['path'].replace("\\","/") + new_line +
                           fish_parameters + comma + fish_param_file_path['path'] + new_line +
                           grid_centerline + comma + centerline_layer + new_line +
                           grid_top_point + comma + top_point_layer + new_line +
                           cover + comma + cover_layer +  new_line +
                           canopy + comma + canopy_layer + new_line +
                           tree_growth + comma + tree_growth_file_path['path'] + new_line +
                           habitat_parameters + comma + hab_param_file_path['path'] + new_line +
                           interaction_parameters + comma + int_param_file_path['path'] + new_line +
                           predator_parameters + comma + pred_param_file_path['path'] + new_line +
                           raster_folder + comma + raster_path + new_line +
                           aoi + comma + aoi_layer + new_line +
                           wildcard + comma + wildcard_file_path) 

            # Write the config string to a file
            config_file = open((new_path + "\\config.txt"), "w")
            config_file.writelines(config_text)
            config_file.close()

            # Make some variables the represent the commands to run code
            start_command = "start \"RUNNING FHAST\" cmd /K "
            quote_string = "\""
            cd_command = "cd "
            new_path_formated = new_path.replace("\\","/")
            fhast_run = ".\FHAST_App\dist\R-Portable\App\R-Portable\\bin\Rscript.exe --vanilla \".\FHAST_app\dist\script\R\\run.R\" \"" + new_path_formated + "/config.txt" + "\""
               #fhast_run = ".\FHAST_App\dist\R-Portable\App\R-Portable\\bin\Rscript.exe --vanilla \".\FHAST_app\dist\script\R\\run.R\""

            
            # Run FHAST
            os.system(start_command + quote_string + cd_command + file_path + "\FHAST & " + fhast_run + " " + str(preview_flag) + quote_string)
            
            pass
        

