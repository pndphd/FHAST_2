# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BatchReproject
                                 A QGIS plugin
 Reprojects all files in a directory
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-02
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Peter Dudley
        email                : pndphd@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from PyQt5.QtWidgets import QMenu
from qgis.PyQt.QtWidgets import (
    QAction,
    QMessageBox
)

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .batch_reproject_dialog import BatchReprojectDialog
import os.path
import glob


#####################
from subprocess import Popen, CREATE_NEW_CONSOLE
from qgis.core import *
import os
import pathlib
import processing
######################


class BatchReproject:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'BatchReproject_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Batch Reproject')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('BatchReproject', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        menu_buttons = self.iface.mainWindow().menuBar().actions()
        button_list = []

        for button in menu_buttons:
            button_list.append(button.text())

        new_button = '&FHAST'

        self.menu = self.iface.mainWindow().findChild(QMenu, '&FHAST' )

        if not new_button in button_list:
        # # If the menu does not exist, create it!
            self.menu = QMenu( new_button, self.iface.mainWindow().menuBar() )
            self.menu.setObjectName( new_button )
            actions = self.iface.mainWindow().menuBar().actions()
            lastAction = actions[-1]
            self.iface.mainWindow().menuBar().insertMenu( lastAction, self.menu )

        # Finally, add your action to the menu
        self.menu.addAction(action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/batch_reproject/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Batch Reproject'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Batch Reproject'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""
        
        # Get the path of this script
        file_path = str(pathlib.Path(__file__).parent.resolve())
        file_path = file_path + "\..\\run_fhast_simulation"
        print(file_path)

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = BatchReprojectDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:

            # get the input path
            in_path = self.dlg.input_folder.filePath()
            if len(in_path) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Output Folder Selected") 
                self.iface.addVectorLayer(stop_program) 

            # get the output path
            out_path = self.dlg.output_folder.filePath()
            if len(out_path) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Output Folder Selected") 
                self.iface.addVectorLayer(stop_program)

            # get the desired crs
            crs = self.dlg.projection_input.crs()

            # go the the path
            os.chdir(in_path)
            # loop over all files ending in ".tif"
            for layr in glob.glob( "*.tif" ):
                
                # ge the output file name and path
                output_name = out_path + "\\" + os.path.basename(layr)
                
                # Delete anything that already exists under that name
                try:
                    os.remove(output_name)
                except OSError:
                    pass

                # reproject
                reproject_params = {'INPUT':layr,
                                    'SOURCE_CRS':None,
                                    'TARGET_CRS':crs,
                                    'RESAMPLING':0,
                                    'NODATA':None,
                                    'TARGET_RESOLUTION':None,
                                    'OPTIONS':'',
                                    'DATA_TYPE':0,
                                    'TARGET_EXTENT':None,
                                    'TARGET_EXTENT_CRS':crs,
                                    'MULTITHREADING':False,
                                    'EXTRA':'-co COMPRESS=DEFLATE -co PREDICTOR=2 -co ZLEVEL=9',
                                    'OUTPUT':output_name}

                processing.run("gdal:warpreproject", reproject_params)


            # go the the path
            os.chdir(in_path)
            # loop over all files ending in ".tif"
            for layr in glob.glob( "*.shp" ):
                
                output_name = out_path + "\\" + os.path.basename(layr)

                try:
                    os.remove(output_name)
                except OSError:
                    pass

                parameter = {'INPUT': layr,
                             'TARGET_CRS': crs,
                             'OUTPUT': output_name}
                processing.run('native:reprojectlayer', parameter)['OUTPUT']
           
            pass