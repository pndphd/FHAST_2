# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OHWMOverlap
                                 A QGIS plugin
 get intersection of OHWM and project 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-05-14
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Peter Dudley
        email                : pndphd@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import (
    QAction,
    QMessageBox
)
from qgis.core import (
    QgsVectorLayer,
    QgsProject,
    QgsVectorFileWriter,
    QgsField
)

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ohwm_overlap_dialog import OHWMOverlapDialog
import os.path
import processing
import pathlib


from PyQt5.QtWidgets import QMenu

class OHWMOverlap:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'OHWMOverlap_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&OHWM Overlap')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('OHWMOverlap', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        menu_buttons = self.iface.mainWindow().menuBar().actions()
        button_list = []

        for button in menu_buttons:
            button_list.append(button.text())

        new_button = '&FHAST'

        self.menu = self.iface.mainWindow().findChild(QMenu, '&FHAST' )

        if not new_button in button_list:
        # # If the menu does not exist, create it!
            self.menu = QMenu( new_button, self.iface.mainWindow().menuBar() )
            self.menu.setObjectName( new_button )
            actions = self.iface.mainWindow().menuBar().actions()
            lastAction = actions[-1]
            self.iface.mainWindow().menuBar().insertMenu( lastAction, self.menu )

        # Finally, add your action to the menu
        self.menu.addAction(action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ohwm_overlap/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'OHWM Overlap'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&OHWM Overlap'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = OHWMOverlapDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:

            # Get the path of this script
            file_path = str(pathlib.Path(__file__).parent.resolve())

            ##### Read in files ##############################################################
            # get the oputput path
            folder_path = self.dlg.output_folder.filePath()
            if len(folder_path) == 0:
                QMessageBox.information(None, "!!!ERROR!!!", "No Output Folder Selected") 
                self.iface.addVectorLayer(stop_program) 

            # Make the output folder
            new_path_temp = folder_path + "\\" + "temporary"
            if not os.path.exists(new_path_temp):
                os.makedirs(new_path_temp)
            
            # get the ohwm layer
            ohwm_path = self.dlg.ohwm.filePath()
            ohwm = QgsVectorLayer(self.dlg.ohwm.filePath(), "ohwm", "ogr")
            if (not ohwm.isValid()):
                QMessageBox.information(None, "!!!ERROR!!!", "No OHWM File Selected") 
                self.iface.addVectorLayer(stop_program) 

            # get the project footprint layer
            footprint_path = self.dlg.footprint.filePath() 
            footprint = QgsVectorLayer(self.dlg.footprint.filePath(), "footprint", "ogr")
            if (not footprint.isValid()):
                QMessageBox.information(None, "!!!ERROR!!!", "No Project Footprint File Selected") 
                self.iface.addVectorLayer(stop_program)
            
            ##### Do layer Checks ##############################################################
            
            # check the for crs match
            if (ohwm.crs() != footprint.crs()):
                if (not self.dlg.reproject_box.isChecked()):
                    QMessageBox.information(None, "!!!ERROR!!!", "Layers Do Not Share a Common CRS") 
                    self.iface.addVectorLayer(stop_program)
                elif (self.dlg.reproject_box.isChecked()):
                    QMessageBox.information(None, "!!!!!!", "Attempting to Reproject OHWM") 

                    # reproject
                    ohwm_path = new_path_temp + "\\" + "re_" + os.path.basename(ohwm_path)

                    # remove old file if it exists
                    if (os.path.isfile(ohwm_path)):
                        os.remove(ohwm_path)

                    # Write the file    
                    reprojected = processing.run("native:reprojectlayer", 
                                                {'INPUT': self.dlg.ohwm.filePath(),
                                                 'TARGET_CRS': footprint.crs(),
                                                 'OUTPUT': ohwm_path})['OUTPUT']
            
            # check the ohwm layer
            ohwm_check = processing.run("qgis:checkvalidity",
                                        {"INPUT_LAYER" : ohwm_path})
            if (ohwm_check['ERROR_COUNT'] != 0 or ohwm_check['INVALID_COUNT'] != 0):
                if (not self.dlg.ohwm_box.isChecked()):
                    QMessageBox.information(None, "!!!ERROR!!!", "OHWM Has Errors or is Invalid") 
                    self.iface.addVectorLayer(stop_program)
                elif (self.dlg.ohwm_box.isChecked()):
                    QMessageBox.information(None, "!!!!!!", "Attempting to fix OHWM")
                    old_ohwm_path = ohwm_path
                    ohwm_path = new_path_temp + "\\" + "fixed_" + os.path.basename(ohwm_path)

                    # remove old file if it exists
                    
                    if (os.path.isfile(ohwm_path)):
                        os.remove(ohwm_path)

                    
                    # Creat the new file
                    fixed = processing.run("native:fixgeometries",
                                          {'INPUT':old_ohwm_path,
                                           'OUTPUT':ohwm_path})

                    # Check again
                    ohwm_check = processing.run("qgis:checkvalidity",
                                               {"INPUT_LAYER" : ohwm_path})
                    if (ohwm_check['ERROR_COUNT'] != 0 or ohwm_check['INVALID_COUNT'] != 0):
                        QMessageBox.information(None, "!!!ERROR!!!", "OHWM Still Has Errors or is Invalid") 
                        self.iface.addVectorLayer(stop_program)

            # check the footprint layer
            footprint_check = processing.run("qgis:checkvalidity",
                                        {"INPUT_LAYER" : footprint_path})
            if (footprint_check['ERROR_COUNT'] != 0 or footprint_check['INVALID_COUNT'] != 0):
                if (not self.dlg.footprint_box.isChecked()):
                    QMessageBox.information(None, "!!!ERROR!!!", "Project Footprint Has Errors or is Invalid") 
                    self.iface.addVectorLayer(stop_program)
                elif (self.dlg.footprint_box.isChecked()):
                    QMessageBox.information(None, "!!!!!!", "Attempting to Fix Project Footprint") 
                    old_footprint_path = footprint_path
                    footprint_path = new_path_temp + "\\" + "fixed_" + os.path.basename(footprint_path)

                    # remove old file if it exists
                    if (os.path.isfile(footprint_path)):
                        os.remove(footprint_path)

                    # Creat the new file
                    fixed = processing.run("native:fixgeometries",
                                           {'INPUT':old_footprint_path,
                                            'OUTPUT':footprint_path})
                    
                    # Check again
                    footprint_check = processing.run("qgis:checkvalidity",
                                                    {"INPUT_LAYER" : footprint_path})
                    if (footprint_check['ERROR_COUNT'] != 0 or footprint_check['INVALID_COUNT'] != 0):
                        QMessageBox.information(None, "!!!ERROR!!!", "Project Footprint Still Has Errors or is Invalid") 
                        self.iface.addVectorLayer(stop_program)

            
            ##### Make some variables the represent the commands to run code #############################
            start_command = "start \"RUNNING FHAST\" cmd /K "
            quote_string = "\""
            cd_command = "cd "
            new_path_f = folder_path.replace("\\","/")
            new_ohwm_f = ohwm_path.replace("\\","/")
            new_footprint_f = footprint_path.replace("\\","/")
            fhast_run = ".\FHAST_App\dist\R-Portable\App\R-Portable\\bin\Rscript.exe --vanilla \".\FHAST_app\dist\script\R\\run_ohwm.R\" \"" + new_path_f + "\""

            # Run FHAST
            os.system(start_command + quote_string + cd_command + file_path + "\..\..\..\..\..\..\FHAST & " + fhast_run + " " + new_ohwm_f + " " + new_footprint_f + quote_string)
            
            pass

         